<?xml version='1.0' encoding='UTF-8'?>
<bajadoc version='1.0' createdBy='Niagara Devkit 3.8.112' createdAt='26-Mar-2017' createdOn='WINDOWS-7ND9PUR'>
<class
  module='psNiagaraDriver'
  qualifiedName='com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt'
  name='BPsNiagaraDriverCircuitProxyExt'
  packageName='com.profileSystems.psNiagaraDriver.circuit'
>
<extends module='devDriver' class='com.tridium.ddf.point.BDdfProxyExt'/>

<!-- property readParameters -->
<property name='readParameters' flags=''>
<type module='devDriver' class='com.tridium.ddf.identify.BDdfIdParams'/>
<description>Slot for the &lt;code&gt;readParameters&lt;/code&gt; property.
 This hooks test driver's read parameters structure
 into the proxy extension that is placed on control
 points that are under devices in your driver. The read parameter's structure tells the dev driver framework which read request to use to read the control point. It also tells test read request's toByteArray method how to construct the bytes for the request.</description>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#getReadParameters</tag>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#setReadParameters</tag>
</property>

<!-- property pointId -->
<property name='pointId' flags=''>
<type module='psNiagaraDriver' class='com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitId'/>
<description>Slot for the &lt;code&gt;pointId&lt;/code&gt; property.
 This tells your driver's read and write response's
 parseReadValue method how to extract the data value
 for a particular control point.</description>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#getPointId</tag>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#setPointId</tag>
</property>

<!-- property writeParameters -->
<property name='writeParameters' flags=''>
<type module='devDriver' class='com.tridium.ddf.identify.BDdfIdParams'/>
<description>Slot for the &lt;code&gt;writeParameters&lt;/code&gt; property.
 This hooks your driver's write parameters structure
 into the proxy extension that is placed on control
 points that are under devices in your driver. The write parameter's structure tells the dev driver framework which write request to use to write the control point. It also tells your write request's toByteArray method how to construct the bytes for the request.</description>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#getWriteParameters</tag>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#setWriteParameters</tag>
</property>

<!-- public devDriver:com.tridium.ddf.identify.BDdfIdParams getReadParameters() -->
<method name='getReadParameters' public='true'>
<return module='devDriver' class='com.tridium.ddf.identify.BDdfIdParams'/>
<description>Get the &lt;code&gt;readParameters&lt;/code&gt; property.
 This hooks test driver's read parameters structure
 into the proxy extension that is placed on control
 points that are under devices in your driver. The read parameter's structure tells the dev driver framework which read request to use to read the control point. It also tells test read request's toByteArray method how to construct the bytes for the request.</description>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#readParameters</tag>
</method>

<!-- public void setReadParameters(devDriver:com.tridium.ddf.identify.BDdfIdParams v) -->
<method name='setReadParameters' public='true'>
<parameter name='v' module='devDriver' class='com.tridium.ddf.identify.BDdfIdParams'/>
<return class='void'/>
<description>Set the &lt;code&gt;readParameters&lt;/code&gt; property.
 This hooks test driver's read parameters structure
 into the proxy extension that is placed on control
 points that are under devices in your driver. The read parameter's structure tells the dev driver framework which read request to use to read the control point. It also tells test read request's toByteArray method how to construct the bytes for the request.</description>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#readParameters</tag>
</method>

<!-- public psNiagaraDriver:com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitId getPointId() -->
<method name='getPointId' public='true'>
<return module='psNiagaraDriver' class='com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitId'/>
<description>Get the &lt;code&gt;pointId&lt;/code&gt; property.
 This tells your driver's read and write response's
 parseReadValue method how to extract the data value
 for a particular control point.</description>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#pointId</tag>
</method>

<!-- public void setPointId(psNiagaraDriver:com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitId v) -->
<method name='setPointId' public='true'>
<parameter name='v' module='psNiagaraDriver' class='com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitId'/>
<return class='void'/>
<description>Set the &lt;code&gt;pointId&lt;/code&gt; property.
 This tells your driver's read and write response's
 parseReadValue method how to extract the data value
 for a particular control point.</description>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#pointId</tag>
</method>

<!-- public devDriver:com.tridium.ddf.identify.BDdfIdParams getWriteParameters() -->
<method name='getWriteParameters' public='true'>
<return module='devDriver' class='com.tridium.ddf.identify.BDdfIdParams'/>
<description>Get the &lt;code&gt;writeParameters&lt;/code&gt; property.
 This hooks your driver's write parameters structure
 into the proxy extension that is placed on control
 points that are under devices in your driver. The write parameter's structure tells the dev driver framework which write request to use to write the control point. It also tells your write request's toByteArray method how to construct the bytes for the request.</description>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#writeParameters</tag>
</method>

<!-- public void setWriteParameters(devDriver:com.tridium.ddf.identify.BDdfIdParams v) -->
<method name='setWriteParameters' public='true'>
<parameter name='v' module='devDriver' class='com.tridium.ddf.identify.BDdfIdParams'/>
<return class='void'/>
<description>Set the &lt;code&gt;writeParameters&lt;/code&gt; property.
 This hooks your driver's write parameters structure
 into the proxy extension that is placed on control
 points that are under devices in your driver. The write parameter's structure tells the dev driver framework which write request to use to write the control point. It also tells your write request's toByteArray method how to construct the bytes for the request.</description>
<tag name='see'>com.profileSystems.psNiagaraDriver.circuit.BPsNiagaraDriverCircuitProxyExt#writeParameters</tag>
</method>

<!-- public baja:javax.baja.sys.Type getType() -->
<method name='getType' public='true'>
<return module='baja' class='javax.baja.sys.Type'/>
</method>

<!-- public baja:javax.baja.sys.Type getDeviceExtType() -->
<method name='getDeviceExtType' public='true'>
<return module='baja' class='javax.baja.sys.Type'/>
<description>This associates BPsNiagaraDeviceExt with BPsNiagaraProxyExt within the
 Niagara AX framework.</description>
</method>

<!-- public byte[] getWriteByteArray() -->
<method name='getWriteByteArray' public='true'>
<return class='byte' dimension='1'/>
</method>

<!-- public baja:javax.baja.status.BStatusValue getReadValue(psNiagaraDriver:com.profileSystems.psNiagaraDriver.PSAPI.BPsAPIObejct response) -->
<method name='getReadValue' public='true'>
<parameter name='response' module='psNiagaraDriver' class='com.profileSystems.psNiagaraDriver.PSAPI.BPsAPIObejct'/>
<return module='baja' class='javax.baja.status.BStatusValue'/>
</method>

<!-- public final static baja:javax.baja.sys.Type TYPE -->
<field name='TYPE' public='true' static='true' final='true'>
<type module='baja' class='javax.baja.sys.Type'/>
</field>

</class>
</bajadoc>

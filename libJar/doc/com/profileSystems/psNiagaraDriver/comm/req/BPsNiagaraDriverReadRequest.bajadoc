<?xml version='1.0' encoding='UTF-8'?>
<bajadoc version='1.0' createdBy='Niagara Devkit 3.8.112' createdAt='26-Mar-2017' createdOn='WINDOWS-7ND9PUR'>
<class
  module='psNiagaraDriver'
  qualifiedName='com.profileSystems.psNiagaraDriver.comm.req.BPsNiagaraDriverReadRequest'
  name='BPsNiagaraDriverReadRequest'
  packageName='com.profileSystems.psNiagaraDriver.comm.req'
>
<extends module='devDriver' class='com.tridium.ddf.comm.req.BDdfReadRequest'/>

<!-- public baja:javax.baja.sys.Type getType() -->
<method name='getType' public='true'>
<return module='baja' class='javax.baja.sys.Type'/>
</method>

<!-- public byte[] toByteArray() -->
<method name='toByteArray' public='true'>
<return class='byte' dimension='1'/>
</method>

<!-- public baja:javax.baja.sys.BSimple getTag() -->
<method name='getTag' public='true'>
<return module='baja' class='javax.baja.sys.BSimple'/>
</method>

<!-- public devDriver:com.tridium.ddf.comm.rsp.BIDdfResponse processReceive(devDriver:com.tridium.ddf.comm.IDdfDataFrame receiveFrame) throws devDriver:com.tridium.ddf.comm.rsp.DdfResponseException -->
<method name='processReceive' public='true'>
<parameter name='receiveFrame' module='devDriver' class='com.tridium.ddf.comm.IDdfDataFrame'/>
<return module='devDriver' class='com.tridium.ddf.comm.rsp.BIDdfResponse'/>
<throws module='devDriver' class='com.tridium.ddf.comm.rsp.DdfResponseException'/>
<description>After transmitting this request, the BDdfCommunicator will pass frames
 that it receives here. If you implement the getTag method then the ddf
 communicator will only pass data frames whose tag's hashcode matches your
 request tag's hashcode. If your request returns null from the getTag
 method then all received data frames will be passed here, until the
 request times out or returns a BIDdfResponse from this method.
 
 This request needs to take one of the following steps: 1. NOT TYPICAL:
 Ignore the frame and return null. 2. NOT TYPICAL: Collect the frame and
 return a BIDdfMultiFrameResponse. In which case, you need to implement
 your own collection mechanism. For example, this could be as simple as
 putting them all in a Vector in the BIDdfMultiFrameResponse. 3. TYPICAL:
 Return a BIDdfResponse for the data frame and NOT TYPICAL:&gt; any
 previously collected frames that you determine together make up a
 completed response. 4. TYPICAL: Throw an DdfResponseException or subclass
 there-of to indicate the the frame forms a complete message but indicates
 an error condition in the device preventing a successful response.
 
 WARNING: In scenario's 2 and 3, please copy the frame's bytes as the
 frame's byte array could be a direct reference to an internal buffer in
 the receiver.
 </description>
</method>

<!-- public final static baja:javax.baja.sys.Type TYPE -->
<field name='TYPE' public='true' static='true' final='true'>
<type module='baja' class='javax.baja.sys.Type'/>
</field>

</class>
</bajadoc>
